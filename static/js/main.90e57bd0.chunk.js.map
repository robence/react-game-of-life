{"version":3,"sources":["redux/types.js","components/cell.js","layout/table.js","redux/actions/index.js","components/button.js","layout/controls.js","layout/counter.js","App.js","app-logic/utils.js","app-logic/logic.js","redux/reducers/table-reducer.js","redux/reducers/play-state-reducer.js","redux/reducers/counter-reducer.js","redux/reducers/index.js","index.js"],"names":["TOGGLE_ALIVE","MAKE_RANDOM","CLEAR","TICK","PLAY","STOP","newBorn","style","background","alive","hoverEmpty","styles",".alive",".new-born",":hover:not(alive):not(newBborn)","border","height","width","Cell","props","react_default","a","createElement","Object","assign","onClick","handleClick","className","concat","tableStyle","margin","borderCollapse","borderSpacing","Table","_this","this","table","map","row","i","key","cell","j","components_cell","status","toggleAlive","Component","connect","_ref","dispatch","x","y","type","display","marginRight","padding","fontSize","fontWeight","lineHeight","color","cursor",":hover","backgroundColor","Button","icon","title","inlineBlock","Control","makeRandomGrid","togglePlay","playState","isRunning","clearInterval","timerId","stopPlaying","interval","setInterval","tick","startPlaying","clear","components_button","Counter","float","generations","counter","textAlign","App","layout_table","controls","layout_counter","makeArray","n","Array","fill","initColumns","grid","makeRandom","push","value","Math","random","initRows","advanceColumn","gridHeight","gridWidth","_","isCellAlive","neighbours","getCellData","topRow","bottomRow","leftColumn","rightColumn","total","calculateNeighbours","advanceRow","makeGrid","arguments","length","undefined","utils","initialGrid","api","initialState","state","combineReducers","action","slice","isRuninng","counterReducer","createStoreWithMiddleware","applyMiddleware","createStore","ReactDOM","render","es","store","reducers","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.90e57bd0.chunk.js","sourcesContent":["export const TOGGLE_ALIVE = 'TOGGLE_ALIVE';\nexport const MAKE_RANDOM = 'MAKE_RANDOM';\nexport const CLEAR = 'CLEAR';\nexport const TICK = 'TICK';\nexport const PLAY = 'PLAY';\nexport const STOP = 'STOP';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { style } from 'glamor';\n\nconst newBorn = style({\n  background: 'rgb(66, 134, 244)',\n});\nconst alive = style({\n  background: 'rgba(66, 134, 244, 0.6)',\n});\n\nconst hoverEmpty = style({\n  background: '#ddd',\n});\n\nconst styles = style({\n  '.alive': alive,\n  '.new-born': newBorn,\n  ':hover:not(alive):not(newBborn)': hoverEmpty,\n  border: '1px solid #ddd',\n  height: '1em',\n  width: '1em',\n});\n\nconst Cell = (props) => (\n  <td\n    onClick={props.handleClick}\n    {...styles}\n    className={`${props.alive ? 'alive' : ''} ${\n      props.newBorn ? 'new-born' : ''\n    }`}\n  />\n);\n\nCell.propTypes = {\n  alive: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  newBorn: PropTypes.bool,\n  handleClick: PropTypes.func,\n};\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { toggleAlive } from '../redux/actions';\nimport Cell from '../components/cell';\n\nconst tableStyle = {\n  margin: '1.2em 0',\n  borderCollapse: 'collapse',\n  borderSpacing: '0',\n};\n\nclass Table extends Component {\n  render() {\n    return (\n      <div>\n        <table style={tableStyle}>\n          <tbody>\n            {this.props.table.map((row, i) => (\n              <tr key={i}>\n                {row.map((cell, j) => (\n                  <Cell\n                    key={j}\n                    alive={cell.status}\n                    newBorn={cell.newBorn}\n                    handleClick={() => this.props.toggleAlive(i, j)}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ table }) => {\n  return { table };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return { toggleAlive: (x, y) => dispatch(toggleAlive(x, y)) };\n};\n\nTable.propTypes = {\n  table: PropTypes.array,\n  toggleAlive: PropTypes.func,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Table);\n","import { TOGGLE_ALIVE, MAKE_RANDOM, TICK, STOP, PLAY, CLEAR } from '../types';\n\nexport function toggleAlive(x, y) {\n  return {\n    type: TOGGLE_ALIVE,\n    x,\n    y,\n  };\n}\n\nexport function makeRandomGrid() {\n  return {\n    type: MAKE_RANDOM,\n  };\n}\n\nexport function tick() {\n  return {\n    type: TICK,\n  };\n}\n\nexport function startPlaying(timerId) {\n  return {\n    type: PLAY,\n    timerId,\n  };\n}\n\nexport function stopPlaying(timerId) {\n  return {\n    type: STOP,\n    timerId,\n  };\n}\n\nexport function clear() {\n  return {\n    type: CLEAR,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { style } from 'glamor';\n\nconst styles = style({\n  display: 'inline-block',\n  marginRight: '0.4em',\n  padding: '0.3em 0.7em',\n  fontSize: '0.9em',\n  fontWeight: '400',\n  lineHeight: '1.5em',\n  background: 'rgb(66, 134, 244)',\n  color: '#fff',\n  cursor: 'pointer',\n  ':hover': {\n    backgroundColor: 'rgba(66, 134, 244, 0.8)',\n  },\n});\n\nconst Button = (props) => {\n  return (\n    <span onClick={props.handleClick} {...styles}>\n      <i className={props.icon} /> {props.title}\n    </span>\n  );\n};\n\nButton.propTypes = {\n  title: PropTypes.string,\n  icon: PropTypes.string,\n  handleClick: PropTypes.func,\n};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport {\n  makeRandomGrid,\n  tick,\n  startPlaying,\n  stopPlaying,\n  clear,\n} from '../redux/actions';\n\nimport Button from '../components/button';\n\nconst inlineBlock = {\n  display: 'inline-block',\n};\n\nclass Control extends Component {\n  componentDidMount() {\n    this.props.makeRandomGrid();\n    this.togglePlay();\n  }\n\n  togglePlay() {\n    if (this.props.playState.isRunning) {\n      clearInterval(this.props.playState.timerId);\n      this.props.stopPlaying();\n    } else {\n      let interval = setInterval(this.props.tick, 100);\n      this.props.startPlaying(interval);\n    }\n  }\n  clear() {\n    if (this.props.isRunning) {\n      clearInterval(this.props.timerId);\n      this.props.stopPlaying();\n    }\n    this.props.clear();\n  }\n\n  render() {\n    return (\n      <div className=\"controls\">\n        <div className=\"buttons\">\n          <Button\n            handleClick={() => this.props.makeRandomGrid()}\n            title={'Randomise'}\n            icon={'fa fa-random'}\n          />\n          <Button\n            handleClick={() => this.clear()}\n            title={'Clear'}\n            icon={'fa fa-undo'}\n          />\n          <div style={inlineBlock}>\n            <Button\n              icon={\n                this.props.playState.isRunning ? 'fa fa-pause' : 'fa fa-play'\n              }\n              handleClick={() => this.togglePlay()}\n            />\n            <Button\n              handleClick={() => this.props.tick()}\n              icon={'fa fa-step-forward'}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nControl.propTypes = {\n  playState: PropTypes.object,\n  makeRandomGrid: PropTypes.func,\n  tick: PropTypes.func,\n  startPlaying: PropTypes.func,\n  stopPlaying: PropTypes.func,\n  clear: PropTypes.func,\n  isRunning: PropTypes.bool,\n  timerId: PropTypes.number,\n};\n\nconst mapStateToProps = ({ playState }) => {\n  return { playState };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    makeRandomGrid: () => dispatch(makeRandomGrid()),\n    tick: () => dispatch(tick()),\n    startPlaying: (timerId) => dispatch(startPlaying(timerId)),\n    stopPlaying: () => dispatch(stopPlaying()),\n    clear: () => dispatch(clear()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Control);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Counter extends Component {\n  render() {\n    const style = {\n      float: 'right',\n    };\n    return <div style={style}>Generations: {this.props.generations}</div>;\n  }\n}\n\nconst mapStateToProps = ({ counter }) => {\n  return { generations: counter };\n};\n\nCounter.propTypes = {\n  generations: PropTypes.number,\n};\n\nexport default connect(mapStateToProps)(Counter);\n","import React, { Component } from 'react';\n\nimport Table from './layout/table';\nimport Controls from './layout/controls';\nimport Counter from './layout/counter';\n\nconst style = {\n  textAlign: 'center',\n  fontSize: '2em',\n  fontWeight: '500',\n  color: 'white',\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1 style={style}>Game of Life</h1>\n        <Table />\n        <Controls />\n        <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// helper\nexport const makeArray = (n) => {\n  return Array(n).fill(null);\n};\n\n// make grid\nexport const initRows = (width, makeRandom) => {\n  return makeArray(width).map(() => {\n    let value;\n    if (makeRandom) {\n      value = Math.random() > 0.85;\n    }\n    return {\n      status: value,\n      newBorn: value,\n    };\n  });\n};\n\nexport const initColumns = (grid, height, width, makeRandom) => {\n  return makeArray(height).map(() => {\n    grid.push(initRows(width, makeRandom));\n  });\n};\n\n// advance grid\nexport const getCellData = (isCellAlive, neighbours) => {\n  if (isCellAlive) {\n    const status = neighbours > 3 || neighbours < 2 ? 0 : 1;\n    return { status };\n  } else {\n    if (neighbours === 3) {\n      return {\n        status: 1,\n        newBorn: true,\n      };\n    } else {\n      return { status: 0 };\n    }\n  }\n};\n\nexport const calculateNeighbours = (grid, x, y, gridHeight, gridWidth) => {\n  let topRow = x - 1 < 0 ? gridHeight - 1 : x - 1;\n  let bottomRow = x + 1 === gridHeight ? 0 : x + 1;\n  let leftColumn = y - 1 < 0 ? gridWidth - 1 : y - 1;\n  let rightColumn = y + 1 === gridWidth ? 0 : y + 1;\n\n  let total = 0;\n  total += grid[topRow][leftColumn].status;\n  total += grid[topRow][y].status;\n  total += grid[topRow][rightColumn].status;\n  total += grid[x][leftColumn].status;\n  total += grid[x][rightColumn].status;\n  total += grid[bottomRow][leftColumn].status;\n  total += grid[bottomRow][y].status;\n  total += grid[bottomRow][rightColumn].status;\n\n  return total;\n};\n\nconst advanceRow = (grid, i, gridHeight, gridWidth) => {\n  return makeArray(gridWidth).map((_, j) => {\n    const isCellAlive = grid[i][j].status;\n    const neighbours = calculateNeighbours(grid, i, j, gridHeight, gridWidth);\n\n    return getCellData(isCellAlive, neighbours);\n  });\n};\n\nexport const advanceColumn = (grid, gridHeight, gridWidth) => {\n  return makeArray(gridHeight).map((_, i) => {\n    return advanceRow(grid, i, gridHeight, gridWidth);\n  });\n};\n","import * as utils from './utils';\n\nexport const makeGrid = (height, width, makeRandom = false) => {\n  // global\n  var grid = [];\n  utils.initColumns(grid, height, width, makeRandom);\n  return grid;\n};\n\nexport const advanceGrid = function(grid = []) {\n  let gridHeight = grid.length;\n  let gridWidth = grid[0].length;\n\n  return utils.advanceColumn(grid, gridHeight, gridWidth);\n};\n","import * as api from '../../app-logic/logic';\nimport { TOGGLE_ALIVE, MAKE_RANDOM, CLEAR, TICK } from '../types';\n\nconst GRID_HEIGHT = 25;\nconst GRID_WIDTH = 40;\nconst initialGrid = api.makeGrid(GRID_HEIGHT, GRID_WIDTH);\n\nexport default (state = initialGrid, action) => {\n  let table;\n  let cell;\n\n  switch (action.type) {\n    case TOGGLE_ALIVE:\n      table = state.slice(0);\n      cell = table[action.x][action.y];\n      cell.status = !cell.status;\n      cell.newBorn = !cell.newBorn;\n      return table;\n    case MAKE_RANDOM:\n      return api.makeGrid(GRID_HEIGHT, GRID_WIDTH, true);\n    case CLEAR:\n      return api.makeGrid(GRID_HEIGHT, GRID_WIDTH);\n    case TICK:\n      return api.advanceGrid(state.slice(0));\n    default:\n      return state;\n  }\n};\n","import { PLAY, STOP } from '../types';\n\nconst initialState = {\n  timerId: null,\n  isRunning: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case PLAY:\n      return {\n        timerId: action.timerId,\n        isRunning: true,\n      };\n    case STOP:\n      return {\n        timerId: null,\n        isRuninng: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { TICK, CLEAR, MAKE_RANDOM } from '../types';\n\nconst counter = (state = 0, action) => {\n  switch (action.type) {\n    case TICK:\n      return state + 1;\n    case CLEAR:\n      return 0;\n    case MAKE_RANDOM:\n      return 0;\n    default:\n      return state;\n  }\n};\n\nexport default counter;\n","import { combineReducers } from 'redux';\n\nimport tableReducer from './table-reducer';\nimport playStateReducer from './play-state-reducer';\nimport counterReducer from './counter-reducer';\n\nexport default combineReducers({\n  table: tableReducer,\n  playState: playStateReducer,\n  counter: counterReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reducers from './redux/reducers';\nimport './index.css';\n\nconst createStoreWithMiddleware = applyMiddleware()(createStore);\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleware(reducers)}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}